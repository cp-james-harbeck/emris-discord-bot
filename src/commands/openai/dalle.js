const { ChatInputCommand } = require('../../classes/Commands');
const { EmbedBuilder } = require('discord.js');
const { getImageResponse, getTotalCost, updateTotalCost } = require('../../handlers/openai/OpenAIManager');
const HandCashManager = require('../../handlers/handcash/handcashManager');
const handCashConfig = require('../../config/handcash');
const RedisHandler = require('../../handlers/handcash/redisHandler');
const redisHandler = new RedisHandler();
const { Permissions } = require('@handcash/handcash-connect');
const handCashManager = new HandCashManager(handCashConfig.handCashAppId, handCashConfig.handCashAppSecret, redisHandler);

async function handlePayment(interaction) {
    const userId = interaction.user.id;
    const authToken = await redisHandler.getUserAuthToken(userId);

    if (!authToken) {
        const redirectUrl = handCashManager.handCashAuth.getRedirectionUrl({
            permissions: [Permissions.Pay],
            state: JSON.stringify({
                userId
            }),
        });
        await interaction.deferReply({ ephemeral: true });
        await interaction.editReply({
            content: `Please authenticate and grant the "Pay" permission by visiting the following URL: ${redirectUrl}`,
        });

        return;
    }

    const cloudAccount = handCashManager.getAccountFromAuthToken(authToken);
    const userPermissions = await cloudAccount.profile.getPermissions();
    if (!userPermissions.includes(Permissions.Pay)) {
        const redirectUrl = handCashManager.handCashAuth.getRedirectionUrl({
            permissions: [Permissions.Pay],
            state: JSON.stringify({
                userId
            }),
        });
        await interaction.deferReply({ ephemeral: true });
        await interaction.editReply({
            content: `Please authenticate and grant the "Pay" permission by visiting the following URL: ${redirectUrl}`
        });
        return;
    }

    try {
        const paymentRequestUrl = await handCashManager.chargeConnectedUserWithAuthToken(userId, 0.03, handCashConfig.webhookUrl);
        await interaction.deferReply({ ephemeral: true });
        await interaction.editReply({
            content: `Please complete the payment by visiting the following URL: ${paymentRequestUrl}`
        });
        redisHandler.setUserAuthToken(userId, authToken);
    } catch (error) {
        console.error(error);
        await interaction.deferReply({ ephemeral: true });
        await interaction.editReply({
            content: 'Error creating payment request. Please try again.'
        });
    }
}


function embedImage(title, url, cost) {
    return new EmbedBuilder()
        .setColor(0x19C37D)
        .setTitle(title.toUpperCase())
        .setAuthor({
            name: 'OpenAI',
            url: 'https://openai.com'
        })
        .setImage(url)
        .setFooter({
            text: `Image generated by DALL路E Artificial Intelligence | Cost: $${cost.toFixed(2)} | Total Cost: $${getTotalCost().toFixed(2)}`,
        });
}

module.exports = new ChatInputCommand({
    global: true,
    aliases: ['dalle'],
    cooldown: {
        type: 'user',
        usages: 25,
        duration: 86400,
    },
    clientPerms: ['EmbedLinks'],
    data: {
        description: 'Generate an image using DALL路E model based on a text prompt.',
        options: [{
            type: 3,
            name: 'prompt',
            description: 'The text prompt for DALL路E image generation',
            required: true,
        },],
    },
    run: async (interaction) => {
        try {
            const userId = interaction.user.id;
            const userPaymentStatus = await redisHandler.getUserPaymentStatus(userId);

            if (userPaymentStatus !== 'PAID') {
                await handlePayment(interaction);
                return;
            }

            const prompt = interaction.options.getString('prompt');
            await interaction.reply({ content: 'Generating image...', ephemeral: true });
            const imageURL = await getImageResponse(prompt);
            const costPerImage = parseFloat(process.env.COST_PER_IMAGE);

            if (imageURL.startsWith('http') || imageURL.startsWith('attachment')) {
                updateTotalCost(costPerImage);
                await interaction.editReply({
                    embeds: [embedImage(prompt, imageURL, costPerImage)],
                });
            } else {
                const errorEmbed = new EmbedBuilder()
                    .setTitle('DALL路E Image Generation')
                    .setDescription('Error: Unable to generate an image. Please try again.')
                    .setColor(0xff0000);

                await interaction.editReply({
                    embeds: [errorEmbed],
                });
            }
        } catch (error) {
            console.error('Error executing command: ', error);
            await interaction.reply({
                content: 'An error occurred while executing this command. Please try again later.',
                ephemeral: true,
            });
        }
    },
});